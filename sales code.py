# -*- coding: utf-8 -*-
"""Copy of Untitled16.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L0YJ9ORPTcWkTT3alet0UBjzEpsM1J88
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install streamlit

import streamlit as st
import pandas as pd
import plotly.express as px
 #df = pd.read_csv("/content/drive/MyDrive/salesweeklycleaned.csv")

import streamlit as st
import pandas as pd
import numpy as np
from keras.models import Sequential
from keras.layers import LSTM, Dense
from statsmodels.tsa.arima.model import ARIMA

# Placeholder data loading and preprocessing (replace with your specific code)
def load_and_preprocess_data():
    # Load your dataset (replace this with your actual data loading logic)
    df = pd.DataFrame({
        'Date': pd.date_range(start='2022-01-01', periods=365),
        'drug_category': np.random.choice(['M01AB', 'M01AE', 'N02BA', 'N02BE', 'N05B', 'N05C', 'R03', 'R06'], 365),
        'Sales': np.random.randint(50, 200, 365)
    })

    # Placeholder for data splitting (replace this with your actual data splitting logic)
    df_train = df[df['Date'] < '2022-11-01']
    df_val = df[(df['Date'] >= '2022-11-01') & (df['Date'] < '2022-12-01')]
    df_test = df[df['Date'] >= '2022-12-01']

    return df_train, df_val, df_test

# Define LSTM and ARIMA model functions (replace with your model implementations)
def build_lstm_model():
    # Define your LSTM model architecture and training process
    model = Sequential()
    model.add(LSTM(50, activation='relu', input_shape=(5, 1)))
    model.add(Dense(1))
    model.compile(optimizer='adam', loss='mse')
    return model

def build_arima_model():
    # Define your ARIMA model fitting process
    # Replace the dots with your ARIMA model parameters and fitting logic
    model = ARIMA(df_train['Sales'], order=(1, 1, 1))
    model_fit = model.fit()
    return model_fit

# Main app logic
st.set_page_config(page_title="Drug Sales Prediction Dashboard")

# Load data and models
df_train, df_val, df_test = load_and_preprocess_data()
drug_categories = df_train["drug_category"].unique()  # Get unique categories

# Sidebar components
st.sidebar.title("Drug Sales Prediction")
selected_category = st.sidebar.selectbox("Select Drug Category", drug_categories)
selected_model = st.sidebar.radio("Select Model", ("LSTM", "ARIMA"))
if st.sidebar.button("Predict"):
    # Filter data based on selected category
    df_filtered = df_val[df_val["drug_category"] == selected_category]

    # Select and use the appropriate model
    if selected_model == "LSTM":
        model = build_lstm_model()  # Build or load the LSTM model
        # Make predictions using LSTM
        # Example: assuming input sequences of length 5
        input_sequences = df_filtered['Sales'].values[-5:].reshape(1, 5, 1)
        predictions = model.predict(input_sequences)
    elif selected_model == "ARIMA":
        model = build_arima_model()  # Fit the ARIMA model
        # Make predictions using ARIMA
        # Example: assuming forecasting next 5 time points
        predictions = model.forecast(steps=5)

    # Display predictions
    st.subheader("Predicted Drug Sales")
    st.line_chart(pd.DataFrame({'Predictions': predictions.flatten()}))  # Or use other appropriate visualizations

    # Optionally, display evaluation metrics or allow downloads

!pip install pyngrok

from pyngrok import ngrok
import streamlit as st

# Run Streamlit app in the background
!streamlit run app.py &

# Create a public URL for the Streamlit app
public_url = ngrok.connect(port="8501")

# Display the public URL
st.success(f"Streamlit app is live at: {public_url}")